# -*- sh -*-

# Documented in git-config(1).

[user]
    name = Will Prater
    # Modify locally via git config --local user.email mstillwell@workplace.com
    email = will@superformula.com

[core]
    excludesfile = ~/.gitignore
	editor = code-insiders --wait

[diff]
    mnemonicprefix = true
    # https://github.com/blog/2288-git-2-11-has-been-released
    indentHeuristic = true
    compactionHeuristic = true
    tool = default-difftool

[fetch]
    prune = true

[alias]
    # https://wikileaks.org/ciav7p1/cms/page_1179773.html
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
    # Show the object type
    type = cat-file -t
    # e.g. git cat master:path/to/file.txt
    cat = cat-file -p
    stat = status -sb
    # Show ignored files
    ls-ignored = status --ignored
    # Reset to HEAD
    reset-hard = reset --hard HEAD
    # Delete untracked files and directories (doesn't work if no commit...)
    reset-harder = !git reset --hard HEAD && git clean -df
    # Delete ignored files (doesn't work if no initial commit...)
    reset-hardest = !git reset --hard HEAD && git clean -xdf

    # Cloning and naming things notes (no good alias...):
    #
    # git clone --origin upstream # changes name to "upstream", but adds tracking info
    # git remote rename <old> <new>
    # git branch --unset-upstream # removes tracking info (but need to change into repo dir, can use cd $(ls -t | head -1)...)
    # git branch -u origin/master # current branch tracks origin/master (but need to fetch first)
    #
    # Example of handling arguments:
    #clone-upstream = "!git clone --origin upstream \"$1\" && cd $(ls -t | head -1) && git branch --unset-upstream #"

    # usage: git date-created foo/bar/baz.txt
    # May not be completely correct: http://stackoverflow.com/a/25633731/11543
    date-created = -c pager.log=false log --pretty=%aI --follow --diff-filter=A
    # usage: git date-modified foo/bar/baz.txt
    date-modified = -c pager.log=false log --pretty=%aI -n 1

    spush = stash -u
    spop = stash pop
    sapply = stash apply

    # Given a ref, returns merge commits that involved that ref
    show-merged-by = "!f() { git log --ancestry-path --merges $1..$(git rev-parse --abbrev-ref HEAD); }; f"

    # Like "git branch", but sorted by last modified date
    # http://stackoverflow.com/a/10693888/11543
    branch-by-date = for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) (%(committerdate:short))'

    # Ignore/unignore changes to files (like a local .gitignore)
    # http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git status -s | awk {'print $2'} | xargs git assume"

    # Like "git status", but takes a reference
    diff-status = !git --no-pager diff --name-status

[advice]
    pushNonFastForward = false
    statusHints = true

[push]
    default = simple

[merge]
    defaultToUpstream = true

[hooks]
    #preCommitRegexp = rawlog|console\\.log

[init]
    #templatedir = ~/.dotfiles/templates

[color]
    ui = auto

[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true

[credential]
    # https://help.github.com/articles/caching-your-github-password-in-git/
    helper = osxkeychain

[pull]
	rebase = preserve

[difftool "default-difftool"]
    cmd = code-insiders --wait --diff $LOCAL $REMOTE
