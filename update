#!/usr/bin/env bash

# Symlinks and copies files from the ~/.dotfiles directory into their
# correct locations: $HOME, $HOME/.config/fish, $HOME/.config/templates,
# etc.

# Echoes, then runs the command.
#
# Combines/is inspired by:
#
#   http://stackoverflow.com/q/12231792/11543
#   https://dl.google.com/dl/cloudsdk/release/install_google_cloud_sdk.bash
#   http://tim.theenchanter.com/2009/02/how-to-escape-arguments-in-bash.html?showComment=1321001720427#c4751431215627296974
function x {
  echo "$" "$@"
  eval $(printf '%q ' "$@")
}

# Ensure directory exists
function xmkdir {
  if [ ! -d "$1" ]; then
    x mkdir -p "$1"
  fi
}

# Returns success if found
function exists {
  type -P "$1" > /dev/null
}

# SRCDIR is the root of the git repo
# From http://stackoverflow.com/a/246128/11543
SRCDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# DSTDIR is probably $HOME
if [ -d "$1" ]; then
  DSTDIR="$1"
else
  DSTDIR="$( cd -P "$( dirname "${SRCDIR}" )" && pwd )"
fi

# "dotfiles" that will end up in $HOME

for f in gls ls ; do

  if exists $f ; then
     LS=$f
     break
  fi

done

for f in $SRCDIR/home/.* ; do

  if [ -d "$f" ]; then
    continue
  fi

  if [ $(basename "$f") = ".DS_Store" ]; then
    continue
  fi

  if [ ! -L "$DSTDIR/$(basename $f)" ]; then
    x ln -sf "$f" "$DSTDIR"
  fi

done

# Remove dangling symlinks

for f in $DSTDIR/.* ; do

  if readlink "$f" > /dev/null ; then
    if [ ! -f $(readlink "$f") ]; then
      x rm "$f"
    fi
  fi

done

# Set PLATFORM after $HOME/.platform has been symlinked

PLATFORM=$($HOME/.platform)

# Ask for sudo upfront if we're likely to need it
if [ "$PLATFORM" = "linux" ]; then
  export DEBIAN_FRONTEND="noninteractive"
  # Good for 5 mins; for more see https://github.com/mathiasbynens/dotfiles/blob/master/.macos#L13
  sudo -v > /dev/null
  SUDO=$? # no boolean values in bash; use [ $SUDO -ne 1 ] in expressions
fi

LOCAL="$HOME/local"
xmkdir "$LOCAL"
BINDIR="$LOCAL/bin"
xmkdir "$BINDIR"

# Sublime Text

# http://www.sublimetext.com/docs/3/projects.html - project specific configuration

# if [ ! `which subl` ]; then
#   if [ -d "/Applications/Sublime Text.app" ]; then
#     x ln -sf "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" "$BINDIR/subl"
#   fi
# fi

# if [ `which subl` ]; then

#   if [ "$PLATFORM" = "linux" ]; then
#     DST="$DSTDIR/.config/sublime-text-3/Packages/User"
#   else
#     DST="$DSTDIR/Library/Application Support/Sublime Text 3/Packages/User"
#   fi

#   xmkdir "$DST"

#   if [ ! -L "$DST/Preferences.sublime-settings" ]; then
#     x rm -f "$DST/Preferences.sublime-settings"
#     x ln -sf "$SRCDIR/etc/subl/Preferences.sublime-settings" "$DST/Preferences.sublime-settings"
#   fi

#   # https://sublime.wbond.net/docs/syncing
#   if [ ! -L "$DST/Package Control.sublime-settings" ]; then
#     x rm -f "$DST/Package Control.sublime-settings"
#     x ln -sf "$SRCDIR/etc/subl/Package Control.sublime-settings" "$DST/Package Control.sublime-settings"
#   fi

#   for d in Linux OSX Windows ; do
#     if [ ! -L "$DST/Default ($d).sublime-keymap" ]; then
#       x rm -f "$DST/Default ($d).sublime-keymap"
#       x ln -sf "$SRCDIR/etc/subl/Default.sublime-keymap" "$DST/Default ($d).sublime-keymap"
#     fi
#   done

# fi

# Atom

# Install atom, apm via the "Atom > Install Shell Commands" menu option

# if [ false -a "$(which atom)" ]; then

#   DST="$DSTDIR/.atom"

#   xmkdir "$DST"

#   for f in $SRCDIR/etc/atom/* ; do

#     if [ ! -L "$DST/$(basename $f)" ]; then
#       x rm -rf "$DST/$(basename $f)"
#       x ln -sf "$f" "$DST"
#     fi

#   done

# fi

# if [ false -a "$(which apm)" ]; then

#   packages="atom-beautify docblockr highlight-selected language-fish-shell linter linter-eslint minimap"

#   for p in $packages ; do
#     if ! apm list -ib | grep -q $p ; then
#       x apm install $p
#     fi
#   done

#   x apm upgrade --no-confirm

# fi

# Keybindings and other settings

case "$PLATFORM" in

  darwin )
    # For some reason *some* applications (like TextEdit) won't read
    # DefaultKeyBinding.dict if it's symlinked, or is in a symlinked directory,
    # so rsync instead of symlink... http://apple.stackexchange.com/a/53110/890
    # rdar://12429092
    x rsync -a --delete "$SRCDIR/etc/KeyBindings" "$DSTDIR/Library"

    # https://github.com/mathiasbynens/dotfiles/blob/master/.macos
    # https://github.com/hjuutilainen/dotfiles/blob/master/bin/osx-user-defaults.sh
    # https://github.com/ymendel/dotfiles/tree/master/osx
    # https://github.com/drduh/OS-X-Security-and-Privacy-Guide

    # How to figure out what setting to change (for fish shell):
    #
    # vimdiff (defaults read -g | psub) (read -p "echo 'Make change and press enter (:qa to exit vimdiff!) > '" ; and defaults read -g | psub)
    # vimdiff (defaults read pro.writer.mac | psub) (read -p "echo 'Make change and press enter (:qa to exit vimdiff!) > '" ; and defaults read pro.writer.mac | psub)

    # System: disable smart quotes
    x defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false

    # System: disable smart dashes
    x defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
    # System: don't correct spelling automatically
    x defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    x defaults write -g WebAutomaticSpellingCorrectionEnabled -bool false
    # System: don't capitalize words automatically
    x defaults write -g NSAutomaticCapitalizationEnabled -bool false
    # System: don't convert double space to period + double space
    x defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
    # System: don't show suggestions on the Touch Bar!
    x defaults write -g NSAutomaticTextCompletionEnabled -bool false
    # System: don't default to iCloud
    x defaults write -g NSDocumentSaveNewDocumentsToCloud -bool false

    # System: speed up mouse (requires logout to take effect?)
    x defaults write -g com.apple.mouse.scaling -float 5
    x defaults write -g com.apple.trackpad.scaling -float 5.0

    # System: enable right click
    x defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode -string TwoButton

    # Finder: keep folders on top when sorting by name
    x defaults write com.apple.finder _FXSortFoldersFirst -int 1
    # Finder: show status bar
    x defaults write com.apple.finder ShowStatusBar -bool true
    # Finder: disable the warning when changing a file extension
    x defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Terminal: disable "marks" http://apple.stackexchange.com/a/209907/890
    x defaults write com.apple.Terminal AutoMarkPromptLines -int 0

    # Safari: show the full URL in the address bar (note: this still hides the scheme)
    # x defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
    # Safari: enable debug menu
    x defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
    # Safari: enable develop menu
    x defaults write com.apple.Safari IncludeDevelopMenu -bool true
    # Safari: show status bar
    x defaults write com.apple.Safari ShowStatusBar -bool true

    # Photos: don't open automatically when external media is connected
    x defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

    x defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    x defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    # Expand print panel by default
    x defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
    x defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

    x defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
    x defaults write com.apple.LaunchServices LSQuarantine -bool false

    # x sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
    # x sudo systemsetup -setrestartfreeze on

    # Use scroll gesture with the Ctrl (^) modifier key to zoom
    x defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
    x defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144

    # Follow the keyboard focus while zoomed in
    x defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true
    x defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

    x defaults write NSGlobalDomain KeyRepeat -int 1
    x defaults write NSGlobalDomain InitialKeyRepeat -int 20

    # Require password immediately after sleep or screen saver begins
    x defaults write com.apple.screensaver askForPassword -int 1
    x defaults write com.apple.screensaver askForPasswordDelay -int 0

    # Save screenshots to the desktop
    x defaults write com.apple.screencapture location -string "${HOME}/Desktop"

    # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
    x defaults write com.apple.screencapture type -string "png"

    # Finder: show all filename extensions
    x defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    # Finder: show status bar
    x defaults write com.apple.finder ShowStatusBar -bool true

    # Finder: show path bar
    x defaults write com.apple.finder ShowPathbar -bool true

    # Display full POSIX path as Finder window title
    x defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    x defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Spotlight: configure categories
    # defaults read com.apple.Spotlight orderedItems | sed -E -e 's/^[[:space:]]+//g' | tr -d '()\n' | tr ',' '\n' | awk -F "\n" '{ print "\'" $1 "\' \\\" }'
    x defaults write com.apple.Spotlight orderedItems -array \
      '{enabled = 1;name = APPLICATIONS;}' \
      '{enabled = 0;name = "MENU_SPOTLIGHT_SUGGESTIONS";}' \
      '{enabled = 1;name = "MENU_CONVERSION";}' \
      '{enabled = 1;name = "MENU_EXPRESSION";}' \
      '{enabled = 1;name = "MENU_DEFINITION";}' \
      '{enabled = 1;name = "SYSTEM_PREFS";}' \
      '{enabled = 0;name = DOCUMENTS;}' \
      '{enabled = 0;name = DIRECTORIES;}' \
      '{enabled = 0;name = PRESENTATIONS;}' \
      '{enabled = 0;name = SPREADSHEETS;}' \
      '{enabled = 0;name = PDF;}' \
      '{enabled = 0;name = MESSAGES;}' \
      '{enabled = 1;name = CONTACT;}' \
      '{enabled = 0;name = "EVENT_TODO";}' \
      '{enabled = 0;name = IMAGES;}' \
      '{enabled = 0;name = BOOKMARKS;}' \
      '{enabled = 0;name = MUSIC;}' \
      '{enabled = 0;name = MOVIES;}' \
      '{enabled = 0;name = FONTS;}' \
      '{enabled = 0;name = "MENU_OTHER";}' \
      '{enabled = 0;name = "MENU_WEBSEARCH";}' \
      '{enabled = 0;name = SOURCE;}'

    # Adjust keybindings

    # NSUserKeyEquivalent modifiers:
    #
    # Command:  @
    # Control:  ^
    # Option:   ~
    # Shift:    $
    # Tab:      \U21e5 (Unicode code point for ⇥ character)

    # System/Global: try to default to "Paste and Match Style" on cmd-v http://apple.stackexchange.com/a/167649/890
    x defaults write -g NSUserKeyEquivalents -dict-add "Paste and Match Style" -string "@v"

    # iA Writer: bind cmd-n to new file, instead of new file in library
    x defaults write pro.writer.mac NSUserKeyEquivalents -dict-add "New" -string "@n"
    # iA Writer: change default extension
    x defaults write pro.writer.mac "Default Path Extension" -string "md"

    # Firefox, Safari: bind cmd-opt-j to "Web Console", to match Chrome (and muscle memory...)
    x defaults write org.mozilla.firefox NSUserKeyEquivalents -dict-add "Web Console" -string "@~j"
    x defaults write com.apple.Safari NSUserKeyEquivalents -dict-add "Show Error Console" -string "@~j"
    x defaults write com.apple.SafariTechnologyPreview NSUserKeyEquivalents -dict-add "Show Error Console" -string "@~j"

    if [ ! -e "$HOME/iCloud" -a -d "$HOME/Library/Mobile Documents/com~apple~CloudDocs" ]; then
      x ln -s "$HOME/Library/Mobile Documents/com~apple~CloudDocs" "$HOME/iCloud"
    fi

    ;;

esac

# Color Palettes

case "$PLATFORM" in

  darwin )
    # https://github.com/altercation/ethanschoonover.com/tree/master/projects/solarized/apple-colorpalette-solarized
    if [ ! -f "$DSTDIR/Library/Colors/Solarized.clr" ]; then
      x cp "$SRCDIR/etc/Solarized.clr" "$DSTDIR/Library/Colors"
    fi
    # https://plus.google.com/+RomanNurik/posts/4VwE8RrXsGd
    if [ ! -f "$DSTDIR/Library/Colors/Material Design.clr" ]; then
      x cp "$SRCDIR/etc/Material Design.clr" "$DSTDIR/Library/Colors"
    fi
    ;;

esac

# Services

case "$PLATFORM" in

  darwin )
    # Let's just assume Services is special...
    x rsync -a --delete "$SRCDIR/etc/Services/" "$DSTDIR/Library/Services/"
    ;;

esac

# fish

# Fish configuration needs to be in ~/.config/fish

if [ ! -L "$HOME/.config/fish" ]; then
  if [ -d "$HOME/.config/fish" ]; then
    x rm -rf "$HOME/.config/fish"
  fi
  x mkdir -p "$HOME/.config"
  x ln -s "$SRCDIR/fish" "$HOME/.config/fish"

  x ln -s "$SRCDIR/omf" "$HOME/.config/omf"
fi

# Update completions
if exists fish ; then
  x fish -c fish_update_completions
fi

# Scripts for $LOCAL/bin

# airport

# if [ -x /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport ]; then
#   x ln -sf /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport $BINDIR
# fi

# brew

if exists brew ; then

  x brew update || exit # need to agree to license when xcode updates
  x brew upgrade --cleanup
  x brew cleanup # --cleanup doesn't seem to always cleanup because brew...

  packages="coreutils dict node tig wget direnv entr ssh-copy-id jq yarn pv"

  for p in $packages ; do
    if ! brew leaves | grep -q $(basename "$p") ; then
      x brew install $p
    fi
  done

  # The non-HEAD version is 7 years old...
  if ! brew leaves | grep -q jed ; then
    x brew install jed --HEAD
  fi

  # Build a curl that supports HTTP/2
  if ! brew leaves | grep -q curl ; then
    x brew install curl --with-nghttp2

    # Force brew to make curl available in PATH
    x brew link curl --force
  fi

fi

# apt-get

if exists apt-get && [ $SUDO -ne 1 ]; then

  x sudo apt-get -y autoclean
  x sudo apt-get -y update
  x sudo apt-get -y upgrade

  packages="apt-file apt-show-versions command-not-found dnsutils apache2-utils htop iftop iotop lsof mosh nodejs-legacy traceroute mtr-tiny whois sysstat dstat hdparm psmisc locate wget pv zip unzip libxml2-utils jed sqlite3 jq"

  for p in $packages ; do
    if ! dpkg --get-selections | grep -q $p ; then
      x sudo apt-get -y install $p
    fi
  done

fi

# npm

if exists npm ; then

  packages="docco eslint firebase-tools http-server npm-check-updates serve"

  for p in $packages ; do
    # Pipe to /dev/null to avoid pipe error when returning early via -q
    if ! npm -g ls --depth=0 --parseable=true | xargs -L 1 basename | grep -x $p > /dev/null ; then
      x npm -g install $p
    fi
  done

  # npm -g update does not work as expected but installing over the top
  # of the outdated package works; see
  # https://github.com/npm/npm/issues/10590#issuecomment-225844879
  for p in `npm -g outdated --parseable=true | cut -d : -f 4 | grep -v npm` ; do
    x npm -g install $p
  done

fi

# yarn (Linux)

if [ "$PLATFORM" = "linux" ]; then

  if ! exists yarn ; then

    # TODO Add check for updates; see https://github.com/yarnpkg/yarn/issues/1139

    xmkdir "$LOCAL/yarn"
    curl -sL https://yarnpkg.com/latest.tar.gz | tar xz --strip 1 -C "$LOCAL/yarn"
    x ln -fs "$LOCAL/yarn/bin/yarn" "$BINDIR"

  fi

fi

# git

if [ "$PLATFORM" = "darwin" ]; then

  git config --file ~/.gitconfig.local credential.helper osxkeychain

fi

# Visual Studio Code

# Don't use system tools to update VS Code
if [ -e /etc/apt/sources.list.d/vscode.list ] && [ $SUDO -ne 1 ]; then
  x sudo rm -f /etc/apt/sources.list.d/vscode.list
fi

if ! exists code ; then
  if [ -d "/Applications/Visual Studio Code.app" ]; then
    x ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" "$BINDIR/code"
  fi
fi

if exists code ; then

  if [ "$PLATFORM" = "linux" ]; then
    DST="$DSTDIR/.config/Code/User"
  else
    DST="$DSTDIR/Library/Application Support/Code/User"

    # VSCODEAPP="/Applications/Visual Studio Code.app"

    # BUNDLEICONFILE=$VSCODEAPP/Contents/Resources/$(/usr/libexec/PlistBuddy -c "Print CFBundleIconFile" "$VSCODEAPP/Contents/Info.plist")

    # if ! cmp -s "$SRCDIR/etc/code/vcs-multi-outline.icns" "$BUNDLEICONFILE" ; then
    #   x cp "$SRCDIR/etc/code/vcs-multi-outline.icns" "$BUNDLEICONFILE"
    #   x touch "$VSCODEAPP"
    # fi

    # BUNDLETYPEICONFILE=$VSCODEAPP/Contents/Resources/$(/usr/libexec/PlistBuddy -c "Print CFBundleTypeIconFile" "$VSCODEAPP/Contents/Info.plist")

    # if ! cmp -s "$SRCDIR/etc/code/vcs-multi-outline.icns" "$BUNDLETYPEICONFILE" ; then
    #   x cp "$SRCDIR/etc/code/vcs-multi-outline.icns" "$BUNDLETYPEICONFILE"
    #   x touch "$VSCODEAPP"
    #   x killall Dock
    # fi

  fi

#   xmkdir "$DST"

#   for f in $SRCDIR/etc/code/* ; do

#     if [ ! -L "$DST/$(basename $f)" ]; then
#       x rm -rf "$DST/$(basename $f)"
#       x ln -sf "$f" "$DST"
#     fi

#   done

  packages="PeterJausovec.vscode-docker TeddyDD.fish dbaeumer.vscode-eslint eg2.tslint joelday.docthis stkb.rewrap xaver.clang-format esbenp.prettier-vscode"

#   for p in $packages ; do
#     if ! code --list-extensions | grep -q $p ; then
#       x code --install-extension $p
#     fi
#   done

# fi
